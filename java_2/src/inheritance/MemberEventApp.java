package inheritance;

//상속(Inheritance) : 클래스를 선언할 때 기존 클래스를 물려받아 사용하는 기능 (기능이 아니라 코드를 물려받는것)
//=> 기존 클래스를 재활용하여 새로운 클래스를 쉽고 빠르게 작성할 수 있다. -> 프로그램의 생산성 증가됨.
//=> 코드의 중복성을 최소화하여 프로그램 생산성 증가 및 유지보수의 효율성 증가
//=> 공통적인 속성과 행위를 포함한 다수의 클래스를 선언할 때 공통적인 속성과 행위의 클래스를 선언하고 상속받아 작성 -> 좀더 쉽게 프로그램을 만들 수 있다.

//물려주는 클래스 : 부모클래스, 선조클래스, 기본클래스, 슈퍼클래스
//물려받는 클래스 : 자식클래스, 후손클래스, 파생클래스, 서브클래스

//형식)  public class 자식클래스 extends 부모클래스 {
//			//자식클래스에서는 부모클래스의 필드 또는 메소드 사용 가능
//			...
//		}

//=> 부모클래스의 생성자는 자식클래스에게 상속되지 않는다. 또한, 부모클래스의 은닉화 선언된 필드와 메소드에도 접근이 불가능하다.
//=> Java에서는 하나의 부모클래스에서만 상속 가능 = 단일 상속

//자식클래스(MemberEvnet)의 생성자로 객체를 생성할 경우, 부모클래스(Member)의 생성자가 먼저 호출되어(=super라는 키워드로 인해서) 부모클래스의 객체가 먼저 생성된 후 자식클래스의 생성자로 객체를 생성하여 상속관계가 자동으로 성립된다.
//=> 자식클래스의 참조변수에는 자식클래스 객체의 메모리주소가 저장된다. (= 자식클래스만 우선 참조.)
//==> 자식클래스의 참조변수에는 자식클래스 객체의 메모리주소가 저장되어 자식클래스 객체의 필드와 메서드를 참조하지만 상속관계에 의해 부모클래스 객체의 필드 또는 메소드 참조 가능.


//이벤트 관련 회원정보(아이디, 이름, 이메일)를 저장하기 위한 클래스
//=> 회원정보를 저장하기 위한 Member class를 상속받아 작성하는 것을 권장한다. -재사용성 증가
public class MemberEventApp {

	public static void main(String[] args) {
		MemberEvent member1 = new MemberEvent();
		
		member1.setId("abc123");
		member1.setName("홍길동");
		member1.setEmail("abc@itwill.com");
		
		member1.display();
		
		System.out.println("==================================================================");
		
		MemberEvent member2 = new MemberEvent("def456", "임꺽정", "def@itwill.com");
		member2.display();
	}
}
